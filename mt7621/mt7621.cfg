#
# The MediaTek MT7621 is a highly integrated network processor suitable for
# 802.11ac wireless router/AP platform, LTE cat4/5, Internet Service Router
# and Home Security Gateway.
#
# Product page:
# https://www.mediatek.com/products/homeNetworking/mt7621
#
# Specifications:
# - Dual-core MIPS1004Kc @ 880 MHz (2 VPEs per core)
# - 32KB L1 I-Cache and 32KB L2 D-Cache
# - 256KB unified L2 Cache
#
# Note:
# Each core can be halted/resumed individually.
# When a VPE is halted, the another VPE within the same core will also be
# halted automatically.
#

source [find mmio.tcl]

adapter srst pulse_width 100
adapter srst delay 100
jtag_ntrst_assert_width 100
jtag_ntrst_delay 100

reset_config trst_and_srst

if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME mt7621
}

jtag newtap ${_CHIPNAME}     cm  -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762124f
jtag newtap ${_CHIPNAME}c1v1 cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762124f
jtag newtap ${_CHIPNAME}c1v0 cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762024f
jtag newtap ${_CHIPNAME}c0v1 cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762124f
jtag newtap ${_CHIPNAME}c0v0 cpu -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id 0x1762024f

set _TARGETNAME $_CHIPNAME.cpu

# If you want to use "reset halt" command, please comment the following 3 lines to make sure only c0v0 is enabled
target create ${_TARGETNAME}3 mips_m4k -endian little -chain-position ${_CHIPNAME}c1v1.cpu -defer-examine
target create ${_TARGETNAME}2 mips_m4k -endian little -chain-position ${_CHIPNAME}c1v0.cpu
target create ${_TARGETNAME}1 mips_m4k -endian little -chain-position ${_CHIPNAME}c0v1.cpu -defer-examine
target create ${_TARGETNAME}0 mips_m4k -endian little -chain-position ${_CHIPNAME}c0v0.cpu

# only core0 vpe0 is active after power-up
targets ${_TARGETNAME}0

proc pre_init {} {
	# Initialize GIC
	mww 0xBFBF8080 0x1FBC0001

	mww 0xBFBC0180 0
	mww 0xBFBC0300 0x3F
	mww 0xBFBC0100 0x3F
	mww 0xBFBC0380 0x3F

	mww 0xBFBC0184 0xFF000000
	mww 0xBFBC0304 0xFF000000
	mww 0xBFBC0104 0xFF000000
	mww 0xBFBC0384 0xFF000000

	mww 0xBFBC0500 0x80000000
	mww 0xBFBC0504 0x80000000
	mww 0xBFBC0508 0x80000004
	mww 0xBFBC050C 0x80000003
	mww 0xBFBC0510 0x80000000
	mww 0xBFBC0514 0x80000005

	mww 0xBFBC05E0 0x80000001
	mww 0xBFBC05E4 0x80000001
	mww 0xBFBC05E8 0x80000001
	mww 0xBFBC05EC 0x80000001
	mww 0xBFBC05F0 0x80000002
	mww 0xBFBC05F4 0x80000002
	mww 0xBFBC05F8 0x80000002
	mww 0xBFBC05FC 0x80000002

	mww 0xBFBC2000 1
	mww 0xBFBC2020 1
	mww 0xBFBC2040 1
	mww 0xBFBC2060 1
	mww 0xBFBC2080 1
	mww 0xBFBC20A0 1
	mww 0xBFBC20C0 1
	mww 0xBFBC20E0 1
	mww 0xBFBC2100 1
	mww 0xBFBC2120 1
	mww 0xBFBC2140 1
	mww 0xBFBC2160 1
	mww 0xBFBC2180 1
	mww 0xBFBC21A0 1
	mww 0xBFBC21C0 1
	mww 0xBFBC21E0 1
	mww 0xBFBC2200 1
	mww 0xBFBC2220 1
	mww 0xBFBC2240 1
	mww 0xBFBC2260 1
	mww 0xBFBC2280 1
	mww 0xBFBC22A0 1
	mww 0xBFBC22C0 1
	mww 0xBFBC22E0 1
	mww 0xBFBC2300 1
	mww 0xBFBC2320 1
	mww 0xBFBC2340 1
	mww 0xBFBC2360 1
	mww 0xBFBC2380 1
	mww 0xBFBC23A0 1
	mww 0xBFBC23C0 1
	mww 0xBFBC23E0 1

	mww 0xBFBC2700 0x1
	mww 0xBFBC2720 0x2
	mww 0xBFBC2740 0x4
	mww 0xBFBC2760 0x8
	mww 0xBFBC2780 0x1
	mww 0xBFBC27A0 0x2
	mww 0xBFBC27C0 0x4
	mww 0xBFBC27E0 0x8

	# Initialize CPC
	mww 0xBFBF8088 0x1FBF0001

	# Initialize CM
	mww 0xBFBF8020 0x3

	mww 0xBFBF8090 0x1C000000
	mww 0xBFBF8098 0xFC000002

	mww 0xBFBF80A0 0x60000000
	mww 0xBFBF80A8 0xF0000002

	mww 0xBFBF80B0 0x1C000000
	mww 0xBFBF80B8 0xFC000002

	mww 0xBFBF80C0 0x1C000000
	mww 0xBFBF80C8 0xFC000002

	mmio_clrbits_32 0xBFBF8008 0x3

	mmio_setbits_32 0xBFBF8010 0x10000

	# Select CPU clock source from 500MHz GPLL
	mmio_clrbits_32 0xBE00002C 0xC0000000

	# Change CPU ratio from 1/0xA to 1/1
	mmio_clrsetbits_32 0xBE000410 0x0000001f 1
	mmio_clrsetbits_32 0xBE000410 0x00001f00 0x100

	# SPI Bus Clock
	mww 0xBE000B3C 0x5

	# Reset PSE SRAM
	mww 0xBE100004 0x1
	sleep 20
	# Enable full PSE SRAM
	mww 0xBE100004 0x6
}

proc load_stage_bin {} {
	load_image mt7621_stage_sram.bin 0xBE108800 bin
	mww 0xBE00001C 0
	wp 0xBE108000 4 r
}

proc set_baudrate {baud} {
	mww 0xBE108930 $baud
}

proc set_cpu_freq {freq} {
	set fb [expr "$freq / 20 - 1"]
	mww 0xBE108820 [expr {0xC0005802 | ($fb << 4)}]
}

proc set_ddr_freq {freq} {
	if { $freq == 1200 } {
		mww 0xBE108824 0x11000000
	} elseif { $freq == 1066 } {
		mww 0xBE108824 0x21000000
	} elseif { $freq == 800 } {
		mww 0xBE108824 0x31000000
	} elseif { $freq == 400 } {
		mww 0xBE108824 0x41000000
	}
}

proc set_ddr2_timing {size} {
	mww 0xBE1088C8 0xAA00AA00
	mww 0xBE1088CC 0xAA00AA00
	mww 0xBE1088D0 0x00000007
	mww 0xBE1088D4 0x22174441
	mww 0xBE1088D8 0x00000000
	mww 0xBE1088DC 0xF0748661
	mww 0xBE1088E0 0x40001273
	if { $size == 8 } {
		mww 0xBE1088E4 0x9F0A0481
	} elseif { $size == 16 } {
		mww 0xBE1088E4 0x9F0F0481
	}
	mww 0xBE1088E8 0x0304692F
	mww 0xBE1088EC 0x15602842
	mww 0xBE1088F0 0x00008888
	mww 0xBE1088F4 0x88888888
	mww 0xBE1088F8 0x00000000
	mww 0xBE1088FC 0x00000000
	mww 0xBE108900 0x00000000
	mww 0xBE108904 0x07100000
	mww 0xBE108908 0x00001B63
	mww 0xBE10890C 0x00002000
	mww 0xBE108910 0x00004000
	mww 0xBE108914 0x00006000
	mww 0xBE108918 0x00000000
	mww 0xBE10891C 0x00000000
	mww 0xBE108920 0x00000000
	mww 0xBE108924 0x00000000
}

proc set_ddr3_timing {size} {
	mww 0xBE108860 0xAA00AA00
	mww 0xBE108864 0xAA00AA00
	mww 0xBE108868 0x00000007
	if { $size != "256" } {
		mww 0xBE10886C 0x44694683
	} else {
		mww 0xBE10886C 0x44694673
	}
	mww 0xBE108870 0x01000000
	if { $size != "128_kgd" } {
		mww 0xBE108874 0xF07486A1
	} else {
		mww 0xBE108874 0xF07406A1
	}
	mww 0xBE108878 0xC287221D
	if { $size == "128" || $size == "128_kgd" } {
		mww 0xBE10887C 0x9F060481
	} elseif {  $size == "256" } {
		mww 0xBE10887C 0x9F050481
	} else {
		mww 0xBE10887C 0x9F0F0481
	}
	if { $size == "128_kgd" } {
		mww 0xBE108880 0x03046923
		mww 0xBE108884 0x152f2842
	} else {
		mww 0xBE108880 0x03046948
		mww 0xBE108884 0x15602842
	}
	mww 0xBE108888 0x00008888
	mww 0xBE10888C 0x88888888
	mww 0xBE108890 0x00000000
	mww 0xBE108894 0x00000000
	if { $size == "128" || $size == "128_kgd" } {
		mww 0xBE108898 0x00000210
	} elseif { $size == "256" } {
		mww 0xBE108898 0x00000220
	} else {
		mww 0xBE108898 0x00000240
	}
	mww 0xBE10889C 0x07100000
	mww 0xBE1088A0 0x00001B61
	mww 0xBE1088A4 0x00002040
	mww 0xBE1088A8 0x00004010
	mww 0xBE1088AC 0x00006000
	mww 0xBE1088B0 0x0C000000
	mww 0xBE1088B4 0x07070000
	if { $size == "128_kgd" } {
		mww 0xBE1088B8 0x000C0000
	} else {
		mww 0xBE1088B8 0x00000000
	}
	mww 0xBE1088BC 0x00000000
}

proc run_cpu_ddr_init {} {
	resume 0xbe108800
	wait_halt 10000
	rwp 0xbe108000

	# Select CPU clock source from CPU PLL
	mmio_clrsetbits_32 0xBE00002C 0xC0000000 0x40000000
}

proc reset_cache {} {
	load_image mt7621_cache_init.bin 0xBE108000 bin
	resume 0xBE108000
	wait_halt 1000
}

proc post_init {} {
	# Reset PSE SRAM
	mww 0xBE100004 0x1
	sleep 100

	# Disable DMA route for PSE SRAM set by BootROM
	mww 0xBE00080C 0

	# GPIOMODE (Set MDIO/RGMII1 to their function mode)
	mmio_clrbits_32 0xBE000060 0x00003000
	mmio_clrbits_32 0xBE000060 0x00004000

	# Set temporary stack
	reg r29 0x80080000
}
